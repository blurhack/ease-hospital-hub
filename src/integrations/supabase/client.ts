
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://clfvypqxfbmdytnmzsga.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsZnZ5cHF4ZmJtZHl0bm16c2dhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ2NTM4MjYsImV4cCI6MjA2MDIyOTgyNn0.RZx_fWAe-RyZHeATThsUaPB8NDaBpR93v729vUAgigw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
//
// Example usage:
// - Query data: const { data, error } = await supabase.from('table_name').select('*')
// - Insert data: const { data, error } = await supabase.from('table_name').insert([{ column: value }])
// - Update data: const { data, error } = await supabase.from('table_name').update({ column: value }).eq('id', id)
// - Delete data: const { data, error } = await supabase.from('table_name').delete().eq('id', id)
// - Listen to realtime changes: 
//   const channel = supabase.channel('table-changes').on('postgres_changes', { event: '*', schema: 'public' }, callback).subscribe()

// Create the Supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Enable real-time subscriptions for specific tables
export const enableRealtimeForTable = async (tableName: string) => {
  try {
    const channel = await supabase.channel(`public:${tableName}`)
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: tableName 
      }, (payload) => {
        console.log('Change received!', payload);
        return payload;
      })
      .subscribe();
    console.log(`Real-time enabled for ${tableName}`);
    return channel;
  } catch (error) {
    console.error(`Error enabling real-time for ${tableName}:`, error);
    throw error;
  }
};

// Enable real-time for all tables
export const enableRealtimeForAllTables = async () => {
  try {
    const tables = [
      'doctors',
      'patients',
      'appointments',
      'rooms',
      'bills',
      'medications',
      'patient_medications'
    ];
    
    for (const table of tables) {
      await enableRealtimeForTable(table);
    }
    console.log('Real-time enabled for all tables');
  } catch (error) {
    console.error('Error enabling real-time for all tables:', error);
  }
};

// Function to log database operations to analytics_logs table
export const logDatabaseOperation = async (
  action_type: string,
  table_name: string,
  query: string,
  record_id?: string
) => {
  try {
    await supabase.from('analytics_logs').insert({
      action_type,
      table_name,
      query,
      record_id,
      performed_by: 'current_user' // In a real app, this would be the authenticated user
    });
  } catch (error) {
    console.error('Error logging operation:', error);
  }
};

// Function to get the table name from a schema string
export const getTableName = (schemaString: string) => {
  const match = schemaString.match(/from\s+([^\s,;]+)/i);
  return match ? match[1] : null;
};

// Function to handle common database errors
export const handleDatabaseError = (error: any, operation: string) => {
  console.error(`Database error during ${operation}:`, error);
  
  let errorMessage = "An error occurred while performing database operation.";
  
  if (error.code === "23505") {
    errorMessage = "A record with this information already exists.";
  } else if (error.code === "23503") {
    errorMessage = "Cannot perform this operation due to related records.";
  } else if (error.message) {
    errorMessage = error.message;
  }
  
  toast({
    title: `Error during ${operation}`,
    description: errorMessage,
    variant: "destructive",
  });
  
  return errorMessage;
};

// Initialize toast if needed
function toast(options: { title: string; description: string; variant?: string }) {
  console.error(`${options.title}: ${options.description}`);
}
